import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

void main() {
  runApp(const MeuPrimeiroAplicativo());
}

class MeuPrimeiroAplicativo extends StatelessWidget {
  const MeuPrimeiroAplicativo({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'GASAPP',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      initialRoute: '/',
      routes: {
        '/': (context) => const TelaConta(),
        '/tela2': (context) => Tela2(),
      },
    );
  }
}

class TelaConta extends StatefulWidget {
  const TelaConta({super.key});

  @override
  State<StatefulWidget> createState() {
    return _CalcContaEstado();
  }
}

class _CalcContaEstado extends State<TelaConta> {
  final _formCalc = GlobalKey<FormState>();
  String _modelo = '';
  double _distancia = 0.0;
  double _potencia = 0.0;
  double _valorLitro = 0.0;
  dynamic _valorTotal;

  void _calcTotal() {
    setState(() {
      double kmPorLitro;
      if (_potencia <= 1.0) {
        kmPorLitro = 13.0;
      } else if (_potencia > 1.0 && _potencia <= 1.4) {
        kmPorLitro = 11.0;
      } else if (_potencia > 1.4 && _potencia <= 1.9) {
        kmPorLitro = 9.5;
      } else {
        kmPorLitro = 7.75;
      }
      _valorTotal = ((_distancia / kmPorLitro) * _valorLitro).toStringAsFixed(2);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        title: const Text('GASAPP'),
        backgroundColor: Colors.blue,
      ),
      body: Form(
        key: _formCalc,
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(10),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: <Widget>[
              Padding(
                padding: const EdgeInsets.all(10),
                child: TextFormField(
                  decoration: const InputDecoration(
                    hintText: 'Modelo do Automóvel',
                    border: OutlineInputBorder(),
                  ),
                  validator: (value) {
                    if (value!.isEmpty) {
                      return 'Informe o modelo do automóvel';
                    } else {
                      _modelo = value;
                    }
                    return null;
                  },
                ),
              ),
              Padding(
                padding: const EdgeInsets.all(10),
                child: TextFormField(
                  keyboardType: TextInputType.number,
                  inputFormatters: [FilteringTextInputFormatter.digitsOnly],
                  decoration: const InputDecoration(
                    hintText: 'Distância (KM)',
                    border: OutlineInputBorder(),
                  ),
                  validator: (value) {
                    if (value!.isEmpty) {
                      return 'Informe a distância';
                    } else {
                      _distancia = double.parse(value);
                      if (_distancia <= 0) {
                        return 'O valor deve ser maior que zero';
                      }
                    }
                    return null;
                  },
                ),
              ),
              Padding(
                padding: const EdgeInsets.all(10),
                child: TextFormField(
                  keyboardType: TextInputType.number,
                  inputFormatters: [FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d{0,1}'))],
                  decoration: const InputDecoration(
                    hintText: 'Potência do Motor (ex: 1.0, 1.4, 1.6)',
                    border: OutlineInputBorder(),
                  ),
                  validator: (value) {
                    if (value!.isEmpty) {
                      return 'Informe a potência do motor';
                    } else {
                      _potencia = double.parse(value);
                      if (_potencia <= 0) {
                        return 'O valor deve ser maior que zero';
                      }
                    }
                    return null;
                  },
                ),
              ),
              Padding(
                padding: const EdgeInsets.all(10),
                child: TextFormField(
                  keyboardType: TextInputType.number,
                  inputFormatters: [FilteringTextInputFormatter.digitsOnly],
                  decoration: const InputDecoration(
                    hintText: 'Valor do litro da gasolina',
                    border: OutlineInputBorder(),
                  ),
                  validator: (value) {
                    if (value!.isEmpty) {
                      return 'Informe o valor do litro da gasolina';
                    } else {
                      _valorLitro = double.parse(value);
                      if (_valorLitro <= 0) {
                        return 'O valor deve ser maior que zero';
                      }
                    }
                    return null;
                  },
                ),
              ),
              Padding(
                padding: const EdgeInsets.all(10),
                child: ElevatedButton(
                  onPressed: () {
                    if (_formCalc.currentState!.validate()) {
                      _calcTotal();
                      Navigator.of(context).pushNamed(
                        '/tela2',
                        arguments: ArgumentosDaTela(
                          "Tela 2 via Argumento",
                          "Valor total R\$ $_valorTotal via Argumento",
                        ),
                      );
                    }
                  },
                  child: const Text('Calcular'),
                ),
              ),
              Padding(
                padding: const EdgeInsets.all(10),
                child: ElevatedButton(
                  onPressed: () {
                    _formCalc.currentState!.reset();
                  },
                  child: const Text('Limpar'),
                ),
              ),
              Padding(
                padding: const EdgeInsets.all(10),
                child: Text(
                  'Valor total R\$ $_valorTotal',
                  style: const TextStyle(fontSize: 20),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class Tela2 extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final args = ModalRoute.of(context)!.settings.arguments as ArgumentosDaTela;
    return Scaffold(
      appBar: AppBar(title: Text(args.titulo)),
      body: Center(child: Text(args.mensagem)),
    );
  }
}

class ArgumentosDaTela {
  final String titulo;
  final String mensagem;

  ArgumentosDaTela(this.titulo, this.mensagem);
}
